<?xml version="1.0" standalone="no"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.1//EN"
    "http://cvs.apache.org/viewcvs.cgi/*checkout*/xml-forrest/src/resources/schema/dtd/document-v11.dtd">
<document>
  <header>
    <title>FOP: Fonts</title>
    <authors>
      <person name="Jeremias MÃ¤rki" email=""/>
      <person name="Tore Engvig" email=""/>
    </authors>
  </header>
  <body>
    <section id="intro">
      <title>Summary</title>
      <p>The following table summarizes the font capabilites of the various FOP renderers:</p>
      <table>
        <tr>
          <th>Renderer</th>
          <th>Base-14</th>
          <th>AWT/OS</th>
          <th>Custom</th>
          <th>Custom Embedding</th>
        </tr>
        <tr>
          <td>PDF</td>
          <td>yes</td>
          <td>no</td>
          <td>yes</td>
          <td>yes</td>
        </tr>
        <tr>
          <td>PostScript</td>
          <td>yes</td>
          <td>no</td>
          <td>yes</td>
          <td>no</td>
        </tr>
        <tr>
          <td>PCL</td>
          <td>yes (modified)</td>
          <td>no</td>
          <td>no</td>
          <td>no</td>
        </tr>
        <tr>
          <td>TXT</td>
          <td>yes (used for layout but not for output)</td>
          <td>no</td>
          <td>yes (used for layout but not for output)</td>
          <td>no</td>
        </tr>
        <tr>
          <td>AWT</td>
          <td>if available from OS</td>
          <td>yes</td>
          <td>no</td>
          <td>n/a (display only)</td>
        </tr>
        <tr>
          <td>Print</td>
          <td>if available from OS</td>
          <td>yes</td>
          <td>no</td>
          <td>controlled by OS printer driver</td>
        </tr>
        <tr>
          <td>RTF</td>
          <td>n/a (font metrics not needed)</td>
          <td>n/a</td>
          <td>n/a</td>
          <td>n/a</td>
        </tr>
        <tr>
          <td>MIF</td>
          <td>n/a (font metrics not needed)</td>
          <td>n/a</td>
          <td>n/a</td>
          <td>n/a</td>
        </tr>
        <tr>
          <td>SVG</td>
          <td>if available from OS</td>
          <td>yes</td>
          <td>no</td>
          <td>no</td>
        </tr>
        <tr>
          <td>XML</td>
          <td>yes</td>
          <td>no</td>
          <td>yes</td>
          <td>n/a</td>
        </tr>
      </table>
    </section>
    <section>
      <title>Base-14 Fonts</title>
      <p>The Adobe PDF Specification specifies a set of 14 fonts that must be available to every PDF reader: Helvetica (normal, bold, italic, bold italic), Times (normal, bold, italic, bold italic), Courier (normal, bold, italic, bold italic), Symbol and ZapfDingbats.</p>
    </section>
    <section id="awt">
      <title>AWT/Operating System Fonts</title>
      <p>The AWT family of renderers (AWT, Print, SVG), use the Java AWT libraries for font metric information. Through operating system registration, the AWT libraries know what fonts are available on the system, and the font metrics for each one.</p>
    </section>
    <section id="custom">
      <title>Custom Fonts</title>
      <p>Support for custom fonts is added by creating font metric files (written in XML) from the actual font files, and registering them with FOP. Currently only Type 1 and TrueType fonts can be added.
More information about fonts can be found at:</p>
      <ul>
        <li><link href="http://partners.adobe.com/asn/developer/type/ftypes.html">Adobe font types</link></li>
        <li><link href="http://partners.adobe.com/asn/developer/technotes/fonts.html">Adobe Font Technote</link>
</li>
      </ul>
      <section id="type1-metrics">
        <title>Type 1 Font Metrics</title>
        <p>FOP includes PFMReader, which reads the PFM file that normally comes with a Type 1 font, and generates an appropriate font metrics file for it.
To use it, run the class org.apache.fop.fonts.apps.PFMReader:</p>
        <p>Windows:</p>
        <source>java -cp build\fop.jar;lib\avalon-framework.jar;lib\xml-apis.jar;
         lib\xercesImpl.jar;lib\xalan.jar
           org.apache.fop.fonts.apps.PFMReader pfm-file xml-file</source>
        <p>Unix:</p>
        <source>java -cp build/fop.jar:lib/avalon-framework.jar:lib/xml-apis.jar:
         lib/xercesImpl.jar:lib/xalan.jar
           org.apache.fop.fonts.apps.PFMReader pfm-file xml-file</source>
        <note>The classpath in the above example has been simplified for readibity.
You will have to adjust the classpath to the names of the actual JAR files in the lib directory.
avalon-framework.jar is necessary only for versions 0.20.5 or later.
xml-apis.jar, xercesImpl.jar and xalan.jar are not necessary for JDK version 1.4 or later.</note>
        <note>The tool will construct some values (FontBBox, StemV and ItalicAngle) based on assumptions and calculations which are only an approximation to the real values.
FontBBox and Italic Angle can be found in the human-readable part of the PFB file or in the AFM file.
The PFMReader tool does not yet interpret PFB or AFM files, so if you want to be correct, you may have to adjust the values in the XML file manually.
The constructed values however appear to have no visible influence.</note>
      </section>
      <section id="truetype-metrics">
        <title>TrueType Font Metrics</title>
        <p>FOP includes TTFReader, which reads the TTF file and generates an appropriate font metrics file for it.
Use it in a similar manner to PFMReader.
For example, to create such a metcis file in Windows from the TrueType font at c:\myfonts\cmr10.ttf:</p>
        <source>java -cp build\fop.jar;lib\avalon-framework.jar;lib\xml-apis.jar;
         lib\xercesImpl.jar;lib\xalan.jar
           org.apache.fop.fonts.apps.TTFReader
             C:\myfonts\cmr10.ttf ttfcm.xml</source>
      </section>
      <section id="truetype-collections-metrics">
        <title>TrueType Collections Font Metrics</title>
        <p>TrueType collections (.ttc files) contain more than one font.
To create metrics files for these fonts, you must specify which font in the collection should be generated, by using the "-ttcname" option with the TTFReader.</p>
        <p>To get a list of the fonts in a collection, just start the TTFReader as if it were a normal TrueType file (without the -ttcname option).
It will display all of the font names and exit with an Exception.</p>
        <p>Here is an example of generating a metrics file for a .ttc file:</p>
        <source>java -cp build\fop.jar;lib\avalon-framework.jar;lib\xml-apis.jar;
         lib\xercesImpl.jar;lib\xalan.jar
           org.apache.fop.fonts.apps.TTFReader -ttcname "MS Mincho"
             msmincho.ttc msminch.xml</source>
      </section>
      <section id="register">
        <title>Register Fonts with FOP</title>
        <p>You must tell FOP how to find and use the font metrics files by registering them in the <link href="configuration.html">FOP Configuration</link>. Add entries for your custom fonts, regardless of font type, to the configuration file in a manner similar to the following:</p>
        <source><![CDATA[<font metrics-file="FTL_____.xml" kerning="yes"
      embed-file="C:\myfonts\FTL_____.pfb">
  <font-triplet name="FrutigerLight" style="normal" weight="normal"/>
</font>]]></source>
        <note>Review the documentation for <link href="configuration.html">FOP Configuration</link> for instructions on making the FOP configuration available to FOP when it runs. Otherwise, FOP has no way of finding your custom font information.</note>
        <ul>
          <li>Starting with FOP version 0.20.5 you can use URLs for the paths to the font files.
Relative URLs are resolved relative to the fontBaseDir property (or baseDir) if available. See <link href="configuration.html">FOP: Configuration</link> for more information.</li>
          <li>The "kerning" and "embed-file" attributes are optional. Kerning is currently not used at all. If embedding is off, the output will position the text correctly (from the metrics file), but it will not be displayed or printed correctly unless the viewer has the applicable font available to their local system.</li>
          <li>When setting the embed-file attribute for Type 1 fonts, be sure to specify the PFB (actual font data), not PFM (font metrics) file that you used to generate the XML font metrics file.</li>
        </ul>
        <note>Cocoon users will need to setup the config, see FOPSerializer for more information.</note>
      </section>
      <section id="embedding">
        <title>Embedding</title>
        <note>The PostScript renderer does not yet support font embedding.</note>
        <note>The font is simply embedded into the PDF file, it is not converted.</note>
        <p>Font embedding is enabled in the userconfig.xml file and controlled by the embed-file attribute.
If you don't specify the embed-file attribute the font will not be embedded, but will only be referenced.</p>
        <p>When FOP embeds a font, it scrambles its fontname by inserting a prefix that ensures that the fontname will not match the fontname of an installed font.
This is helpful with older versions of Acrobat Reader that preferred installed fonts over embedded fonts.</p>
        <p>When embedding PostScript fonts, the entire font is always embedded.</p>
        <p>When embedding TrueType fonts (ttf) or TrueType Collections (ttc), a new font, containing only the glyphs used, is created from the original font and embedded in the pdf.
Currently, this embedded font contains only the minimum data needed to be embedded in a pdf document, and does not contain any codepage information.
The PDF document contains indexes to the glyphs in the font instead of to encoded characters.
While the document will be displayed correctly, the net effect of this is that searching, indexing, and cut-and-paste will not work properly.</p>
        <p>One workaround for this behavior is to use the -ansi option when generating metrics with TTFReader.
This will cause the whole font to be embedded in the pdf document.
Characters will be WinAnsi encoded (as specified in the PDF spec), so you lose the ability to use characters from other character sets.</p>
      </section>
    </section>
  </body>
</document>
